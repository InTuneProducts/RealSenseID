%module(directors="1") SwigWrapper

%{
	#include "RealSenseID/AndroidSerialConfig.h"
	#include "RealSenseID/AuthConfig.h"
	#include "RealSenseID/Status.h"
	#include "RealSenseID/SignatureCallback.h"
	#include "RealSenseID/AuthenticateStatus.h"
	#include "RealSenseID/AuthenticationCallback.h"
	#include "RealSenseID/Preview.h"
	#include "RealSenseID/FacePose.h"
	#include "RealSenseID/EnrollStatus.h"
	#include "RealSenseID/EnrollmentCallback.h"
	#include "RealSenseID/FaceAuthenticator.h"
	#include "RealSenseID/DeviceController.h"
	#include "RealSenseID/FwUpdater.h"
	#include "RealSenseID/Version.h"

  void yuv2RGBA(int width, int height, unsigned char* yuyv_image, unsigned char* rgba_image)
  {
    const int RGBA_SIZE = 4;
    //unsigned char* rgba_image = new unsigned char[width * height * RGBA_SIZE]; // width and height of the image to be converted

    int y;
    int cr;
    int cb;

    double r;
    double g;
    double b;

    for (int i = 0, j = 0; i < width * height * RGBA_SIZE; i += (RGBA_SIZE*2) ,j += 4)
    {
        // first pixel
        y  = yuyv_image[j];
        cb = yuyv_image[j + 1];
        cr = yuyv_image[j + 3];

        r = y + (1.4065 * (cr - 128));
        g = y - (0.3455 * (cb - 128)) - (0.7169 * (cr - 128));
        b = y + (1.7790 * (cb - 128));

        // This prevents colour distortions in your rgb image
        if (r < 0)
            r = 0;
        else if (r > 255)
            r = 255;
        if (g < 0)
            g = 0;
        else if (g > 255)
            g = 255;
        if (b < 0)
            b = 0;
        else if (b > 255)
            b = 255;

        rgba_image[i]     = (unsigned char)r;
        rgba_image[i + 1] = (unsigned char)g;
        rgba_image[i + 2] = (unsigned char)b;
        rgba_image[i + 3] = 255;
        // second pixel
        y  = yuyv_image[j + 2];
        cb = yuyv_image[j + 1];
        cr = yuyv_image[j + 3];

        r = y + (1.4065 * (cr - 128));
        g = y - (0.3455 * (cb - 128)) - (0.7169 * (cr - 128));
        b = y + (1.7790 * (cb - 128));

        if (r < 0)
            r = 0;
        else if (r > 255)
            r = 255;
        if (g < 0)
            g = 0;
        else if (g > 255)
            g = 255;
        if (b < 0)
            b = 0;
        else if (b > 255)
            b = 255;

        rgba_image[i + 4] = (unsigned char)r;
        rgba_image[i + 5] = (unsigned char)g;
        rgba_image[i + 6] = (unsigned char)b;
        rgba_image[i + 7] = 255;
    }
  } 
	using namespace RealSenseID;
%}

%include "std_string.i"
%include "std_vector.i"
%include "typemaps.i"

namespace std {
   %template(StringVector) vector<string>;
}


#define RSID_API
#define ANDROID
#cmakedefine RSID_SECURE

// Define directors (allow C++ code to call Java code as well as the other way around)
%feature("director") SignatureCallback;
%feature("director") AuthenticationCallback;
%feature("director") EnrollmentCallback;
%feature("director") PreviewImageReadyCallback;
%feature("director") EventHandler;


%typemap(jstype) std::string& OUTPUT "String[]"
%typemap(jtype) std::string& OUTPUT "String[]"
%typemap(jni) std::string& OUTPUT "jobjectArray"
%typemap(javain)  std::string& OUTPUT "$javainput"
%typemap(in) std::string& OUTPUT (std::string temp) {
  if (!$input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
    return $null;
  }
  if (JCALL1(GetArrayLength, jenv, $input) == 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
  }
  $1 = &temp;
}
%typemap(argout) std::string& OUTPUT {
  jstring jvalue = JCALL1(NewStringUTF, jenv, temp$argnum.c_str()); 
  JCALL3(SetObjectArrayElement, jenv, $input, 0, jvalue);
}

%apply std::string& OUTPUT { std::string& version }
%apply std::string& OUTPUT { std::string& outFwVersion }



%typemap(jni) char **STRING_IN_OUT "jobjectArray"
%typemap(jtype) char **STRING_IN_OUT "String[]"
%typemap(jstype) char **STRING_IN_OUT "String[]"
%typemap(in) char **STRING_IN_OUT (jint size) {
  int i = 0;
  if ($input) {
    size = JCALL1(GetArrayLength, jenv, $input);
#ifdef __cplusplus
    $1 = new char*[size+1];
#else
    $1 = (char **)malloc((size+1) * sizeof(char *));
#endif
    for (i = 0; i<size; i++) {
      jstring j_string = (jstring)JCALL2(GetObjectArrayElement, jenv, $input, i);
      const char *c_string = JCALL2(GetStringUTFChars, jenv, j_string, 0);
#ifdef __cplusplus
      $1[i] = new char [strlen(c_string)+1];
#else
      $1[i] = (char *)malloc((strlen(c_string)+1) * sizeof(const char *));
#endif
      ::strcpy($1[i], c_string);
      JCALL2(ReleaseStringUTFChars, jenv, j_string, c_string);
      JCALL1(DeleteLocalRef, jenv, j_string);
    }
    $1[i] = 0;
  } else {
    $1 = 0;
    size = 0;
  }
}

%typemap(argout) char **STRING_IN_OUT {
  for (int i=0; i< (int) size$argnum; i++) {
    jstring jnewstring = NULL;
    jnewstring = JCALL1(NewStringUTF, jenv, $1[i]);
    JCALL3(SetObjectArrayElement, jenv, $input, i, jnewstring); 
  }
}

%typemap(freearg) char **STRING_IN_OUT {
  int i;
  for (i=0; i<size$argnum; i++)
#ifdef __cplusplus
    delete[] $1[i];
  delete[] $1;
#else
  free($1[i]);
  free($1);
#endif
}

%typemap(out) char **STRING_IN_OUT {
  if ($1) {
    int i;
    jsize len=0;
    jstring temp_string;
    const jclass clazz = JCALL1(FindClass, jenv, "java/lang/String");

    while ($1[len]) len++;
    $result = JCALL3(NewObjectArray, jenv, len, clazz, NULL);
    /* exception checking omitted */

    for (i=0; i<len; i++) {
      temp_string = JCALL1(NewStringUTF, jenv, *$1++);
      JCALL3(SetObjectArrayElement, jenv, $result, i, temp_string);
      JCALL1(DeleteLocalRef, jenv, temp_string);
    }
  }
}

%typemap(javain) char **STRING_IN_OUT "$javainput"
%typemap(javaout) char **STRING_IN_OUT {
    return $jnicall;
  }

%apply char **STRING_IN_OUT { char** user_ids }
%apply unsigned int& OUTPUT { unsigned int& number_of_users }
%apply unsigned int& INOUT { unsigned int& number_of_users_in_out }


%typemap(jni) unsigned char *BYTE "jbyteArray"
%typemap(jtype) unsigned char *BYTE "byte[]"
%typemap(jstype) unsigned char *BYTE "byte[]"
%typemap(in) unsigned char *BYTE {
  $1 = (unsigned char *) JCALL2(GetByteArrayElements, jenv, $input, 0); 
}

%typemap(argout) unsigned char *BYTE {
  JCALL3(ReleaseByteArrayElements, jenv, $input, (jbyte *) $1, 0); 
}

%typemap(javain) unsigned char *BYTE "$javainput"

/* Prevent default freearg typemap from being used */
%typemap(freearg) unsigned char *BYTE ""
%apply(unsigned char *BYTE) { unsigned char *buffer1 }


// API defined in RealSenseID
%include "@RealSenseID_HEADERS_FOLDER@/AndroidSerialConfig.h"
%include "@RealSenseID_HEADERS_FOLDER@/AuthConfig.h"
%include "@RealSenseID_HEADERS_FOLDER@/Status.h"
%include "@RealSenseID_HEADERS_FOLDER@/SignatureCallback.h"
%include "@RealSenseID_HEADERS_FOLDER@/AuthenticateStatus.h"
%include "@RealSenseID_HEADERS_FOLDER@/AuthenticationCallback.h"
%include "@RealSenseID_HEADERS_FOLDER@/Preview.h"
%include "@RealSenseID_HEADERS_FOLDER@/FacePose.h"
%include "@RealSenseID_HEADERS_FOLDER@/EnrollStatus.h"
%include "@RealSenseID_HEADERS_FOLDER@/EnrollmentCallback.h"
%include "@RealSenseID_HEADERS_FOLDER@/FaceAuthenticator.h"
%include "@RealSenseID_HEADERS_FOLDER@/DeviceController.h"
%include "@RealSenseID_HEADERS_FOLDER@/FwUpdater.h"
%include "@RealSenseID_HEADERS_FOLDER@/Version.h"

namespace RealSenseID {
  %extend struct Image
  {
    void GetImageBuffer(unsigned char *buffer1) {
      yuv2RGBA($self->width, $self->height, $self->buffer, buffer1);
    }
  };
}